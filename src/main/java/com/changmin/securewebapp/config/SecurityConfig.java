package com.changmin.securewebapp.config;import com.changmin.securewebapp.handler.JwtAccessDeniedHandler;import com.changmin.securewebapp.handler.JwtAuthenticationEntryPoint;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import com.changmin.securewebapp.filter.JwtAuthenticationFilter;@EnableMethodSecurity@RequiredArgsConstructor@Configurationpublic class SecurityConfig {    private final JwtAuthenticationFilter jwtAuthenticationFilter;    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;    private final JwtAccessDeniedHandler jwtAccessDeniedHandler;    @Bean    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {        http                .csrf(csrf -> csrf.disable()) // CSRF 비활성화 (REST API에서 필요 없음)                .authorizeHttpRequests(auth -> auth                        .requestMatchers("/api/**").permitAll()                        .anyRequest().authenticated()                )                .exceptionHandling(exception -> exception                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)                        .accessDeniedHandler(jwtAccessDeniedHandler)                )                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }    @Bean    public BCryptPasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }}