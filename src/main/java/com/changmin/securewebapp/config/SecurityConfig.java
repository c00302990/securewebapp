package com.changmin.securewebapp.config;import com.changmin.securewebapp.handler.JwtAccessDeniedHandler;import com.changmin.securewebapp.handler.JwtAuthenticationEntryPoint;import com.changmin.securewebapp.repository.UserRepository;import com.changmin.securewebapp.service.LogoutService;import com.changmin.securewebapp.util.JwtUtil;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.HttpMethod;import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import com.changmin.securewebapp.filter.JwtAuthenticationFilter;@EnableMethodSecurity@RequiredArgsConstructor@Configurationpublic class SecurityConfig {    private final JwtUtil jwtUtil;    private final LogoutService logoutService;    private final UserRepository userRepository;    private final JwtAuthenticationFilter jwtAuthenticationFilter;    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;    private final JwtAccessDeniedHandler jwtAccessDeniedHandler;    @Bean    public JwtAuthenticationFilter jwtAuthenticationFilter(){        return new JwtAuthenticationFilter(jwtUtil, userRepository, logoutService);    }    @Bean    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {        http                // CSRF 비활성화 (REST API에서 필요 없음)                .csrf(csrf -> csrf.disable())                .authorizeHttpRequests(auth -> auth                        .requestMatchers(HttpMethod.GET,"/", "/api/users/login",                                        "/api/users/signup", "/api/posts").permitAll()                        .requestMatchers("/posts.html").permitAll()                        .requestMatchers(("/api/users/logout")).authenticated()                        .requestMatchers("/api/posts/**").authenticated()                        .requestMatchers("/create-post.html", "/post.html").authenticated()                        .anyRequest().permitAll()                )                .exceptionHandling(exception -> exception                        .authenticationEntryPoint(jwtAuthenticationEntryPoint)                        .accessDeniedHandler(jwtAccessDeniedHandler)                )                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }    @Bean    public BCryptPasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }}